/*******************************************************************
Title : Claims
Name :  G.Srichetan Reddy
Roll no : 2301CS54

Declaration of Authorship
This txt file , claims.txt is a part of assignment of CS2102_PROJECT
at the Department of Computer Science and Engineering , IIT PATNA.
********************************************************************/

===============
Files :
===============

All the files I submitted assembler.cpp , emulater.cpp, claims.txt have my name at the start,
along with declaration of authorship

The evidence for Assembler including the output files from the test examples(test1, test2, test3, test4) and 
bubblesort has also been uploaded along with 5 Sample tests.

All test files have been tested and working properly.

================
Files Submitted:
================
    => assembler.cpp and emulater.cpp along with .exe for both these files.
    => 10 test files including bubblesort along with 38 files(include .o,.L,.log,.trace files)
    => claims.txt 
    => Screenshot of bubblesort (both assembler and emulater 2png files)

=========================
Compilation Instructions:
=========================

Compile  in the following way :

    g++ assembler.cpp -o assembler
    ./assembler
	(Give the input file name after running the exe file(it asks))

    g++ emulater.cpp -o emulater
    ./emulater 
	(Give the input file name after running the exe file(it asks))


=============================
Program Format and Structure:
=============================

The Assembler:
    * Written in C++ language
    * All Instructions are implemented 
    * It contains a table of symbols
    * assembler.cpp is the main and only file of my assembler
    * It is a 2 pass assembler (implemented in assemler.cpp)
    * outputs the required correct information in the form of 3 things :
       *  the errors are in log file(They will not be displayed in the terminal) if not assembled properly.
       *  .l file is for listing all the instructions along with their machinecodes
       *  .o file if for only machine code 
    * All errors are diagnosed along with thier line numbers
    * Comments or self descriptive variable names have been used
    * The Assembler is capable of understanding the values given in decimal , octal or hexadecimal format
    * Assembler successfully skips empty lines and comments

The Emulator:
    * The emulator is interactive and can run all instructions according to user's input.
    * Assumes that all the data and set instructions are segregated from other parts of code 
      else may not run as expected.
    * Error handling:  Throws error is segmentation fault occurs.
    * Functionalities:
       => trace ( Runs the Program )
       => Show memory before execution (Contains all the machine codes)
       => Show Memory after execution  
       => Show registers (Shows the values in Registers A,B,SP,PC)
    




